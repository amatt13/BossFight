using System;
using System.Collections.Generic;
using BossFight.Models;

namespace BossFight
{
    public enum EffectType
    {
        DivineShield,
        Intimidate
    }

    public abstract class Effect
    {
        public EffectType Type { get; }
        public int Duration { get; set; }
        public ITarget Target { get; protected set; }

        protected Effect(EffectType type, int duration)
        {
            Type = type;
            Duration = duration;
        }

        public abstract void Apply(ITarget target);
        public abstract void Remove(ITarget target);
    }

    public class DivineShieldEffect : Effect
    {
        public DivineShieldEffect(int duration)
            : base(EffectType.DivineShield, duration)
        {
        }

        public override void Apply(ITarget target)
        {
            target.ApplyDivineShield();
        }

        public override void Remove(ITarget target)
        {
            target.RemoveDivineShield();
        }
    }

    public class IntimidateEffect : Effect
    {
        public IntimidateEffect(int duration)
            : base(EffectType.Intimidate, duration)
        {
        }

        public override void Apply(ITarget target)
        {
            target.ApplyIntimidate();
        }

        public override void Remove(ITarget target)
        {
            target.RemoveIntimidate();
        }
    }

    public class EffectManager
    {
        private Dictionary<EffectType, List<Effect>> activeEffects;

        public EffectManager()
        {
            activeEffects = new Dictionary<EffectType, List<Effect>>();
        }

        public void ApplyEffect(Effect effect, ITarget target)
        {
            if (!activeEffects.ContainsKey(effect.Type))
            {
                activeEffects[effect.Type] = new List<Effect>();
            }

            activeEffects[effect.Type].Add(effect);

            // Apply the effect to the target
            effect.Apply(target);
        }

        public void ApplyInstantEffect(Effect pEffect, ITarget pTarget)
        {

        }

        public void RemoveEffect(Effect effect, ITarget target)
        {
            if (activeEffects.ContainsKey(effect.Type))
            {
                activeEffects[effect.Type].Remove(effect);

                // Remove the effect from the target
                effect.Remove(target);

                // Clean up the list if it becomes empty
                if (activeEffects[effect.Type].Count == 0)
                {
                    activeEffects.Remove(effect.Type);
                }
            }
        }

        public void UpdateEffects()
        {
            foreach (var effectList in activeEffects.Values)
            {
                for (int i = effectList.Count - 1; i >= 0; i--)
                {
                    var effect = effectList[i];

                    // Reduce the duration of the effect
                    effect.Duration--;

                    // Check if the effect has expired
                    if (effect.Duration <= 0)
                    {
                        // Remove the effect from the list
                        effectList.RemoveAt(i);

                        // Remove the effect from the target
                        effect.Remove(effect.Target);

                        // Clean up the list if it becomes empty
                        if (effectList.Count == 0)
                        {
                            activeEffects.Remove(effect.Type);
                        }
                    }
                }
            }
        }
    }
}